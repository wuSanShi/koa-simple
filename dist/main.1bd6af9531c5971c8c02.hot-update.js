exports.id = "main";
exports.modules = {

/***/ "./platforms/server/middleWares/routers.js":
/*!*************************************************!*\
  !*** ./platforms/server/middleWares/routers.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_Router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @core/Router */ \"./core/Router.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @utils */ \"./utils/index.js\");\n/* harmony import */ var _server_config_routeSchema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/config/routeSchema */ \"./platforms/server/config/routeSchema.js\");\n/* harmony import */ var _server_routes_jobs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/routes/jobs */ \"./platforms/server/routes/jobs.js\");\n/* harmony import */ var _server_routes_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @server/routes/component */ \"./platforms/server/routes/component.js\");\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ([_server_routes_jobs__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _server_routes_component__WEBPACK_IMPORTED_MODULE_4__[\"default\"]].map(routeFun => {\n  const Route = Object(_core_Router__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n  const routeInfo = routeFun(_server_config_routeSchema__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n  if (routeInfo.prefix) Route.prefix('/'.concat(routeInfo.prefix).replace(/\\/+/, '/'));\n\n  for (let [key, value] of Object.entries(routeInfo.routers)) {\n    const [method, url] = ''.concat(key).split(/\\s+/gi);\n    Route.on({\n      method,\n      url,\n      ...value\n    }, async (ctx, next, param) => {\n      if (_utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getKeyData(ctx, 'request.query.mock', false) && param.mock) {\n        ctx.response.body = {\n          data: param.mock,\n          status: 200\n        };\n      }\n\n      if (param.cation) await param.cation(ctx, next, param);\n      ctx.response.body = {\n        message: 123123\n      };\n    });\n  }\n\n  return Route;\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wbGF0Zm9ybXMvc2VydmVyL21pZGRsZVdhcmVzL3JvdXRlcnMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wbGF0Zm9ybXMvc2VydmVyL21pZGRsZVdhcmVzL3JvdXRlcnMuanM/ZDRkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGVyIGZyb20gJ0Bjb3JlL1JvdXRlcic7XHJcbmltcG9ydCBVdGlscyBmcm9tICdAdXRpbHMnO1xyXG5pbXBvcnQgUm91dGVTY2hlbWEgZnJvbSAnQHNlcnZlci9jb25maWcvcm91dGVTY2hlbWEnO1xyXG5pbXBvcnQgSm9ic1JvdXRlIGZyb20gJ0BzZXJ2ZXIvcm91dGVzL2pvYnMnO1xyXG5pbXBvcnQgY29tcG9uZW50Um91dGUgZnJvbSAnQHNlcnZlci9yb3V0ZXMvY29tcG9uZW50JztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBbSm9ic1JvdXRlLCBjb21wb25lbnRSb3V0ZV0ubWFwKHJvdXRlRnVuPT57XHJcblx0Y29uc3QgUm91dGUgPSBSb3V0ZXIoKTtcclxuXHRjb25zdCByb3V0ZUluZm8gPSByb3V0ZUZ1bihSb3V0ZVNjaGVtYSk7XHJcblx0aWYocm91dGVJbmZvLnByZWZpeCkgUm91dGUucHJlZml4KCcvJy5jb25jYXQocm91dGVJbmZvLnByZWZpeCkucmVwbGFjZSgvXFwvKy8sICcvJykpO1xyXG5cdGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyb3V0ZUluZm8ucm91dGVycykpIHtcclxuXHRcdGNvbnN0IFttZXRob2QsIHVybF0gPSAnJy5jb25jYXQoa2V5KS5zcGxpdCgvXFxzKy9naSk7XHJcblx0XHRSb3V0ZS5vbih7IG1ldGhvZCwgdXJsLCAuLi52YWx1ZSB9LCBhc3luYyAoY3R4LCBuZXh0LCBwYXJhbSk9PnsgXHJcblx0XHRcdGlmKFV0aWxzLmdldEtleURhdGEoY3R4LCAncmVxdWVzdC5xdWVyeS5tb2NrJywgZmFsc2UpICYmIHBhcmFtLm1vY2spe1xyXG5cdFx0XHRcdGN0eC5yZXNwb25zZS5ib2R5ID0geyBcclxuXHRcdFx0XHRcdGRhdGE6ICBwYXJhbS5tb2NrLFxyXG5cdFx0XHRcdFx0c3RhdHVzOlx0IDIwMFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0gXHJcblx0XHRcdGlmKHBhcmFtLmNhdGlvbikgYXdhaXQgcGFyYW0uY2F0aW9uKGN0eCwgbmV4dCwgcGFyYW0pO1xyXG5cdFx0XHRjdHgucmVzcG9uc2UuYm9keSA9IHtcclxuXHRcdFx0XHRtZXNzYWdlOiAxMjMxMjNcclxuXHRcdFx0fTtcclxuXHRcdH0pIFxyXG5cdH1cclxuXHRyZXR1cm4gUm91dGVcclxufSlcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./platforms/server/middleWares/routers.js\n");

/***/ }),

/***/ "./utils/index.js":
/*!************************!*\
  !*** ./utils/index.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst encodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst decodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);\nconst Utils = {\n  getType(source) {\n    return Object.prototype.toString.call(source).slice(8, -1).toLowerCase();\n  },\n\n  getKeyData(source = {}, keys = '', defValue, unit = '.') {\n    let tempResult = [].concat(source || {}).map(function (sourceItem) {\n      switch (Utils.getType(keys)) {\n        case 'object':\n          let tempInfo = {};\n\n          for (let i in keys) {\n            tempInfo[i] = Utils.getKeyData(sourceItem, keys[i], defValue, unit);\n          }\n\n          return tempInfo;\n\n        case 'array':\n          return Utils.getKeyData(sourceItem, keys.join(unit), defValue, unit);\n\n        case 'string':\n          let tempSource = sourceItem;\n          let tempKeys = keys.split(unit);\n\n          try {\n            tempKeys.forEach(function (keyItem, index) {\n              if (keyItem == '[]') {\n                let packKey = tempKeys.slice(index + 1).join(unit);\n                tempSource = !packKey ? tempSource : Utils.getKeyData(tempSource, packKey, defValue, unit);\n                throw new Error('isWrong');\n              }\n\n              tempSource = tempSource[keyItem];\n\n              switch (true) {\n                case index + 1 < tempKeys.length && [\"number\", \"string\"].includes(Utils.getType(tempSource)):\n                case tempSource == undefined:\n                  tempSource = defValue;\n                  throw new Error('isWrong');\n              }\n            });\n          } catch (e) {}\n\n          return tempSource;\n      }\n    });\n    return Utils.getType(source) == 'array' ? tempResult : tempResult.shift();\n  },\n\n  setKeyData(source, keys = [], value, isMult = false, unit = '.') {\n    let temp = source;\n    if (!source) return;\n\n    switch (Utils.getType(keys)) {\n      case 'array':\n        keys = keys.join(unit).split(unit);\n        break;\n\n      case 'string':\n      case 'number':\n        keys = ''.concat(keys).split(unit);\n        break;\n    }\n\n    [].concat(keys).forEach(function (key, index) {\n      if (['', 'null', 'NaN', 'undefined'].includes(''.concat(key))) return;\n\n      if (index + 1 == keys.length) {\n        if (!isMult) return temp[key] = value;\n        temp[key] = [].concat(temp[key] || [], value);\n      }\n\n      ;\n      if (!temp[key]) temp[key] = {};\n      temp = temp[key];\n    });\n    return temp;\n  },\n\n  removeKeyData(source, keys, unit = '.') {\n    if (keys == undefined || keys == false) return;\n\n    switch (Utils.getType(keys)) {\n      case 'array':\n        keys = keys.join(unit);\n        break;\n    }\n\n    let tempKeys = keys.split(unit);\n    let popKey = tempKeys.pop();\n    let temp = Utils.getKeyData(source, tempKeys.join('.'), source);\n\n    switch (Utils.getType(temp)) {\n      case 'arry':\n        if (/^[0-9]+$/.test(popKey)) temp.splice(popKey, 1);else temp = temp.filter(item => item != popKey);\n        break;\n\n      case 'object':\n        delete temp[popKey];\n\n      default:\n        break;\n    }\n\n    return source;\n  },\n\n  getUnique(arr, keys) {\n    let temps = [],\n        tempMap = {};\n    [].concat(arr || []).forEach(function (item, index) {\n      let tempKey = undefined;\n\n      switch (Utils.getType(item)) {\n        case 'string':\n        case 'number':\n          tempKey = item;\n          break;\n\n        case 'object':\n          tempKey = Utils.getKeyData(item, keys);\n          break;\n      }\n\n      if (tempKey === undefined) return;\n\n      if (!tempMap[tempKey]) {\n        temps.push(item);\n        tempMap[tempKey] = true;\n      }\n    });\n    return temps;\n  },\n\n  getPackClass(arr, config) {\n    if (!config) return this;\n    let tempMap = {\n      classMap: {},\n      classDatas: {}\n    };\n\n    let Tool_PackData = function (data, config) {\n      var nodeParam = {\n        isValid: false\n      };\n\n      for (let i in config) {\n        if (config[i].validate(data)) {\n          nodeParam.isValid = true;\n          nodeParam.data = {\n            key: i,\n            source: data,\n            config: config[i],\n            id: config[i].id && ''.concat(config[i].id(data)).replace(/\\./g, '#'),\n            title: config[i].title && config[i].title(data)\n          };\n          const {\n            id,\n            title,\n            validate,\n            childs,\n            ...other\n          } = config[i];\n          Utils.assignValue(other, nodeParam.data, data);\n          if (config[i].childs) nodeParam.data.childs = [].concat(config[i].childs(data) || []);\n          break;\n        }\n\n        ;\n      }\n\n      return nodeParam;\n    };\n\n    let tempCycle = function (arr, obj, config, parent) {\n      const childDatas = [];\n      [].concat(arr).forEach(function (item, index) {\n        let itemNode = Tool_PackData(item, config);\n        if (!itemNode.isValid) return;\n        if (parent && parent.id) itemNode.data.tempParentId = parent.id;\n\n        if (parent) {\n          itemNode.data.parentId = parent.id;\n          itemNode.data.parentKey = parent.key;\n          itemNode.data.parent = parent;\n        }\n\n        ;\n        Utils.setKeyData(obj.classMap, [itemNode.data.key, itemNode.data.id], itemNode.data);\n        Utils.setKeyData(obj.classMap, ['all', itemNode.data.id], itemNode.data);\n        Utils.setKeyData(obj.classDatas, itemNode.data.key, item, true);\n        Utils.setKeyData(obj.classDatas, 'all', item, true);\n        if (itemNode.data.childs) itemNode.data.childs = tempCycle(itemNode.data.childs, obj, config, itemNode.data);\n        childDatas.push(itemNode.data);\n      });\n      return childDatas;\n    };\n\n    tempCycle(arr, tempMap, config);\n    return tempMap;\n  },\n\n  getUrlByQuery(obj) {\n    let query = [];\n\n    for (let key in obj) {\n      if (obj[key] === undefined || !''.concat(obj[key]).length) continue;\n      [].concat(obj[key]).forEach(function (item) {\n        query.push(''.concat(key, '=', encodeURI(item)));\n      });\n    }\n\n    return query.join('&');\n  },\n\n  getQueryByUrl(searchStr) {\n    let tempUrl = decodeURIComponent(searchStr || window.location.hash || window.location.search);\n    let reg = /[\\?&]([^=]+)[=\\s]+([^&]+);?/g;\n    let tempMap = {};\n\n    while (reg.exec(tempUrl)) tempMap[''.concat(RegExp.$1).trim()] = ''.concat(RegExp.$2).trim();\n\n    return tempMap;\n  },\n\n  getPackTree(arr, config) {\n    let temps = [],\n        datas = [].concat(arr),\n        tempMap = {},\n        tempTypeMap = {};\n\n    let Tool_PackData = function (data, config) {\n      let nodeParam = {\n        isValid: false\n      };\n\n      for (let i in config) {\n        if (config[i].validate(data)) {\n          nodeParam.isValid = true;\n          nodeParam.tag = config[i].tag;\n          nodeParam.data = {\n            key: i,\n            source: data,\n            config: config[i],\n            id: config[i].id(data)\n          };\n          const {\n            id,\n            tag,\n            validate,\n            parentId,\n            childId,\n            ...other\n          } = config[i];\n          Utils.assignValue(other, nodeParam.data, data);\n          if (config[i].parentId) Utils.setKeyData(nodeParam.data, 'parentId', config[i].parentId(data));\n          if (config[i].childId) Utils.setKeyData(nodeParam.data, 'childId', config[i].childId(data));\n          break;\n        }\n\n        ;\n      }\n\n      return nodeParam;\n    };\n\n    let toolData = function (data, map, typeMap) {\n      Utils.setKeyData(map, data.key, data.source, true);\n      Utils.setKeyData(typeMap, [data.key, data.id], data.source);\n      Utils.setKeyData(typeMap, ['all', data.id], data);\n    };\n\n    let tempCycle = function (list, data, config) {\n      list.forEach(function (item, index) {\n        let itemNode = Tool_PackData(item, config);\n        if (!itemNode.isValid) return;\n\n        switch (true) {\n          case itemNode.data.parentId == data.id:\n          case Utils.getType(data.childId) == 'array' && \"^\".concat(data.childId.join(\"^\"), \"^\").includes(\"^\" + itemNode.data.id + \"^\"):\n          case Utils.getType(data.childId) == 'string' && itemNode.data.id == data.childId:\n            Utils.setKeyData(data, 'source.packChilds', itemNode.data.source, true);\n            break;\n        }\n\n        switch (true) {\n          case itemNode.data.id == data.parentId:\n          case Utils.getType(itemNode.data.childId) == 'array' && \"^\".concat(itemNode.data.childId.join(\"^\"), \"^\").includes(\"^\" + data.id + \"^\"):\n          case Utils.getType(itemNode.data.childId) == 'string' && itemNode.data.childId == data.id:\n            data.parentKey = itemNode.data.key;\n            data.parentId = itemNode.data.id;\n            Utils.setKeyData(itemNode.data, 'source.packChilds', data.source, true);\n            break;\n        }\n      });\n      return data;\n    };\n\n    while (!!datas.length) {\n      let item = Tool_PackData(datas[0], config);\n      datas.splice(0, 1);\n      if (!item.isValid) continue;\n      toolData(item.data, tempMap, tempTypeMap);\n      let packData = tempCycle(datas, item.data, config);\n      if (item.data.parentId == undefined || item.tag == 'root') temps.push(packData.source);\n    }\n\n    ;\n    return {\n      source: temps,\n      classDatas: tempMap,\n      classMap: tempTypeMap\n    };\n  },\n\n  //1. Utils.getMapByConfig([], {key:'key.loadAllGroup.0.res.packData', isMult: true, keyFormat: function(data, key){return '{0}_{1}'.format(data.device_auto_id, data.channel_id) },dataFormat: function (data, key) { return {} } } })\n  //2.Utils.getMapByConfig([],[{key:'store', isMult: true },{ key:'store', isMult: true }])\n  getMapByConfig(arr, config, keyFormat, dataFormat, isMult) {\n    let keyList = [].concat(config || []);\n    let keysMap = {};\n\n    let parseData = function (data, map, itemKey, keyFormat, Dataformat, isMult) {\n      let tempData = data;\n      if (!map[itemKey]) map[itemKey] = {};\n      let tempMap = map[itemKey];\n      let tempKey = keyFormat ? keyFormat(data, itemKey) : Utils.getKeyData(data, itemKey, '');\n      [].concat(tempKey).map(function (itemKey) {\n        if (Dataformat) tempData = Dataformat(data);\n        Utils.setKeyData(tempMap, itemKey, tempData, isMult);\n      });\n    };\n\n    [].concat(arr || []).forEach(function (item, index) {\n      keyList.forEach(function (keyItem) {\n        switch (Utils.getType(keyItem)) {\n          case 'string':\n          case 'number':\n            return parseData(item, keysMap, keyItem, keyFormat, dataFormat, isMult);\n\n          case 'object':\n            return parseData(item, keysMap, keyItem.key, keyItem.keyFormat || keyFormat, keyItem.dataFormat || dataFormat, keyItem.isMult || isMult);\n        }\n      });\n    });\n    return keysMap;\n  },\n\n  getShuffle(arr) {\n    let i = arr.length;\n\n    while (i) {\n      let j = Math.floor(Math.random() * i--);\n      [arr[j], arr[i]] = [arr[i], arr[j]];\n    }\n\n    return arr;\n  },\n\n  getFlattenArrs(arr) {\n    return arr.reduce((plane, toBeFlatten) => plane.concat(Array.isArray(toBeFlatten) ? Utils.getFlattenArrs(toBeFlatten) : toBeFlatten), []);\n  },\n\n  assignValue(config, cacheDate = {}, sourceData) {\n    for (let key in config) {\n      switch (Utils.getType(config[key])) {\n        case 'function':\n          cacheDate[key] = config[key](sourceData);\n          break;\n\n        default:\n          cacheDate[key] = config[key];\n          break;\n      }\n    }\n\n    ;\n  },\n\n  toFixed(num, fixedNumber) {\n    switch (true) {\n      case num == undefined:\n      case num == false:\n      case num == Infinity:\n      case isNaN(value):\n        num = 0;\n        break;\n    }\n\n    return Number(num).toFixed(fixedNumber);\n  },\n\n  getStringFormat(str, obj) {\n    if (str && str.length > 0) {\n      if (Utils.getType(obj) === \"object\") {\n        for (let key in obj) {\n          let reg = new RegExp(\"({\" + ''.concat(key).replace(/[\\$]/g, '\\\\' + '$$') + \"})\", \"g\");\n          str = str.replace(reg, obj[key]);\n        }\n      } else {\n        str = str.replace(/{(\\d+)}/g, function (s, i) {\n          if (i > arguments.length) return '';\n          return arguments[i];\n        });\n      }\n    }\n\n    return str;\n  },\n\n  intValue(num) {\n    if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {\n      return num &= 0xFFFFFFFF;\n    }\n\n    return num;\n  },\n\n  hashCode(str) {\n    let hash = 0;\n\n    if (typeof str === 'string' && str) {\n      for (let i = 0; i < str.length; i++) {\n        hash += str.charCodeAt(i) * i;\n        hash = this.intValue(hash);\n      }\n    }\n\n    return hash;\n  },\n\n  // const fileRules = [{\n  //     reg: function(file){ return /(\\.dgs)$/.test(file.name) },\n  //     tip: formatMessage({id:'source.packages.validateFromate'}),\n  //     fallback: self.Evt_FallBack\n  // }];\n  //checkValidate({}, fileRules)\n  checkValidate(value, rules) {\n    const TypeCheckValue = function (value, reg) {\n      if (Utils.getType(reg) == 'regexp') return reg.test(value);\n\n      if (typeof reg == 'function') {\n        let flag = reg(value);\n        return flag == undefined && true || flag;\n      }\n    };\n\n    if (!rules) return true;\n    let flag = true;\n\n    try {\n      [].concat(rules || []).forEach(function (item) {\n        flag = TypeCheckValue(value, item.reg);\n\n        if (!flag) {\n          item.fallback && item.fallback(item, value);\n          throw new Error('validate is not ture');\n        }\n      });\n    } catch (e) {}\n\n    return flag;\n  },\n\n  deepCopy(obj, excludeKey, excludeType) {\n    const result = Array.isArray(obj) ? [] : {};\n\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let item = obj[key];\n        if (excludeType && new RegExp(Utils.getType(item)).test(excludeType)) continue;\n        if (excludeKey && excludeKey == key) continue;\n\n        if (typeof item === 'object' && item !== null) {\n          result[key] = Utils.deepCopy(item);\n        } else {\n          result[key] = item;\n        }\n      }\n    }\n\n    return result;\n  },\n\n  judge(type, ...arg) {\n    type = ['some', 'every'].includes(type) ? type : 'some';\n    return new Promise((resolve, reject) => {\n      try {\n        const flag = Utils.getFlattenArrs([].concat(arg))[type](item => {\n          switch (Utils.getType(item)) {\n            case 'function':\n              return item();\n\n            default:\n              return item;\n          }\n        });\n        flag ? resolve(flag) : reject(flag);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  },\n\n  filterValidate(obj) {\n    switch (Utils.getType(obj)) {\n      case 'object':\n        {\n          const newData = {};\n\n          for (let i in obj) {\n            if (obj[i] !== undefined) newData[i] = obj[i];\n          }\n\n          return newData;\n        }\n\n      case 'array':\n        {}\n        break;\n    }\n  },\n\n  encode(str) {\n    var out, i, len;\n    var c1, c2, c3;\n    str = ''.concat(str);\n    len = str.length;\n    i = 0;\n    out = \"\";\n\n    while (i < len) {\n      c1 = str.charCodeAt(i++) & 0xff;\n\n      if (i == len) {\n        out += encodeChars.charAt(c1 >> 2);\n        out += encodeChars.charAt((c1 & 0x3) << 4);\n        out += \"==\";\n        break;\n      }\n\n      c2 = str.charCodeAt(i++);\n\n      if (i == len) {\n        out += encodeChars.charAt(c1 >> 2);\n        out += encodeChars.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);\n        out += encodeChars.charAt((c2 & 0xF) << 2);\n        out += \"=\";\n        break;\n      }\n\n      c3 = str.charCodeAt(i++);\n      out += encodeChars.charAt(c1 >> 2);\n      out += encodeChars.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);\n      out += encodeChars.charAt((c2 & 0xF) << 2 | (c3 & 0xC0) >> 6);\n      out += encodeChars.charAt(c3 & 0x3F);\n    }\n\n    return out;\n  },\n\n  decode(str) {\n    var c1, c2, c3, c4;\n    var i, len, out;\n    str = ''.concat(str);\n    len = str.length;\n    i = 0;\n    out = \"\";\n\n    while (i < len) {\n      do {\n        c1 = decodeChars[str.charCodeAt(i++) & 0xff];\n      } while (i < len && c1 == -1);\n\n      if (c1 == -1) break;\n\n      do {\n        c2 = decodeChars[str.charCodeAt(i++) & 0xff];\n      } while (i < len && c2 == -1);\n\n      if (c2 == -1) break;\n      out += String.fromCharCode(c1 << 2 | (c2 & 0x30) >> 4);\n\n      do {\n        c3 = str.charCodeAt(i++) & 0xff;\n        if (c3 == 61) return out;\n        c3 = decodeChars[c3];\n      } while (i < len && c3 == -1);\n\n      if (c3 == -1) break;\n      out += String.fromCharCode((c2 & 0XF) << 4 | (c3 & 0x3C) >> 2);\n\n      do {\n        c4 = str.charCodeAt(i++) & 0xff;\n        if (c4 == 61) return out;\n        c4 = decodeChars[c4];\n      } while (i < len && c4 == -1);\n\n      if (c4 == -1) break;\n      out += String.fromCharCode((c3 & 0x03) << 6 | c4);\n    }\n\n    return out;\n  }\n\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Utils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/index.js\n");

/***/ })

};